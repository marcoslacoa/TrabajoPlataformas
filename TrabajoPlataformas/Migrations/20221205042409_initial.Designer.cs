// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrabajoPlataformas;

#nullable disable

namespace TrabajoPlataformas.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20221205042409_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrabajoPlataformas.CajaAhorro", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("cbu")
                        .HasColumnType("int");

                    b.Property<double>("saldo")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("Cajas", (string)null);
                });

            modelBuilder.Entity("TrabajoPlataformas.Movimiento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("detalle")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("idCaja")
                        .HasColumnType("int");

                    b.Property<double>("monto")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("idCaja");

                    b.ToTable("Movimientos", (string)null);
                });

            modelBuilder.Entity("TrabajoPlataformas.Pago", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("detalle")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.Property<double>("monto")
                        .HasColumnType("float");

                    b.Property<bool>("pagado")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("idUsuario");

                    b.ToTable("Pagos", (string)null);
                });

            modelBuilder.Entity("TrabajoPlataformas.PlazoFijo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<int>("cbu")
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaIni")
                        .HasColumnType("datetime");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.Property<double>("monto")
                        .HasColumnType("float");

                    b.Property<bool>("pagado")
                        .HasColumnType("bit");

                    b.Property<int>("tasa")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idUsuario");

                    b.ToTable("Plazos", (string)null);
                });

            modelBuilder.Entity("TrabajoPlataformas.TarjetaCredito", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("codigoSeguridad")
                        .HasColumnType("int");

                    b.Property<double>("consumos")
                        .HasColumnType("float");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.Property<int>("limite")
                        .HasColumnType("int");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("idUsuario");

                    b.ToTable("Tarjetas", (string)null);
                });

            modelBuilder.Entity("TrabajoPlataformas.Usuario", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("bloqueado")
                        .HasColumnType("bit");

                    b.Property<string>("contra")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("dni")
                        .HasColumnType("int");

                    b.Property<bool>("esADM")
                        .HasColumnType("bit");

                    b.Property<int>("intentosFallidos")
                        .HasColumnType("int");

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("TrabajoPlataformas.UsuarioCaja", b =>
                {
                    b.Property<int>("num_usr")
                        .HasColumnType("int");

                    b.Property<int>("idCaja")
                        .HasColumnType("int");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.HasKey("num_usr", "idCaja");

                    b.HasIndex("idCaja");

                    b.ToTable("UsuarioCaja");
                });

            modelBuilder.Entity("TrabajoPlataformas.Movimiento", b =>
                {
                    b.HasOne("TrabajoPlataformas.CajaAhorro", "caja")
                        .WithMany("movimientos")
                        .HasForeignKey("idCaja")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("caja");
                });

            modelBuilder.Entity("TrabajoPlataformas.Pago", b =>
                {
                    b.HasOne("TrabajoPlataformas.Usuario", "usuario")
                        .WithMany("pagos")
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("TrabajoPlataformas.PlazoFijo", b =>
                {
                    b.HasOne("TrabajoPlataformas.Usuario", "titular")
                        .WithMany("plazoFijo")
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("titular");
                });

            modelBuilder.Entity("TrabajoPlataformas.TarjetaCredito", b =>
                {
                    b.HasOne("TrabajoPlataformas.Usuario", "titular")
                        .WithMany("tarjetas")
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("titular");
                });

            modelBuilder.Entity("TrabajoPlataformas.UsuarioCaja", b =>
                {
                    b.HasOne("TrabajoPlataformas.CajaAhorro", "caja")
                        .WithMany("UserCaja")
                        .HasForeignKey("idCaja")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrabajoPlataformas.Usuario", "usuario")
                        .WithMany("UserCaja")
                        .HasForeignKey("num_usr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("caja");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("TrabajoPlataformas.CajaAhorro", b =>
                {
                    b.Navigation("UserCaja");

                    b.Navigation("movimientos");
                });

            modelBuilder.Entity("TrabajoPlataformas.Usuario", b =>
                {
                    b.Navigation("UserCaja");

                    b.Navigation("pagos");

                    b.Navigation("plazoFijo");

                    b.Navigation("tarjetas");
                });
#pragma warning restore 612, 618
        }
    }
}
